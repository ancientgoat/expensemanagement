group 'apptricity'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.5")
    }
}

//
// BUILD_NUMBER - Comes from Jenkins or you can add it manually 'gradlew -PBUILD_NUMBER=xx buildForInsert'
//
if (!project.hasProperty('BUILD_NUMBER')) {
    version = "0.1-SNAPSHOT"
} else {
    version = "1.${BUILD_NUMBER}"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
//apply plugin: "com.ewerk.gradle.plugins.querydsl"
//apply from:'file:emma.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8


ext {
    generatedSourcesDir = file("${buildDir}/generated-sources")
    querydslVersion    = "3.7.2"
}
sourceSets {
    generated {
        java {
            //srcDirs = ['src/main/generated']
            //srcDirs queryPredicateSrcDir
            srcDir "src/main/java"
            srcDir generatedSourcesDir
        }
    }
}

jar {
    baseName = 'eric-kamradt-server'
}

//querydsl {
//    // we use mongodb
//    springDataMongo = true
//}

configurations {
    //javacApt
    //querydslapt
    queryDslTool
}

//
// Use the maven repository for the following dependencies.
//
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: "org.springframework.boot", name: "spring-boot-starter-web", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter-data-rest", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter-data-mongodb", version: "1.3.2.RELEASE"
    compile group: 'javax.persistence', name: 'persistence-api', version: '1.0'

    //compile group: 'com.querydsl', name: 'querydsl-mongodb', version: '4.0.8'

    compile group: 'com.mysema.querydsl', name: 'querydsl-mongodb', version: '3.7.2'
    compile group: 'com.mysema.querydsl', name: 'querydsl-core', version: '3.7.2'
    compile group: 'com.mysema.querydsl', name: 'querydsl-apt', version: '3.7.2'

    // compile group: 'com.querydsl', name: 'querydsl-jpa', version: '3.7.2'

    // compile group: "org.springframework.boot", name: "spring-boot-starter-security", version: "1.3.2.RELEASE"

    //querydslapt "com.mysema.querydsl:querydsl-apt:$querydslVersion"
    //querydslapt "com.mysema.querydsl:querydsl-apt:2.8.0"
    //querydslapt  "com.mysema.querydsl:querydsl-apt:${querydslVersion}"
    queryDslTool group: 'com.mysema.querydsl', name: 'querydsl-apt', version: '2.8.0' //queryDslVersion

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task generateSources {
    def queryDslDir = new File(buildDir, 'generated-sources/java')
    sourceSets.main.java.srcDirs += queryDslDir
    inputs.files(sourceSets.main.java.srcDirs)
    outputs.dir(queryDslDir)
    doLast {
        if (!queryDslDir.exists()) {
            queryDslDir.mkdirs()
        }
        def classPathStr = (configurations.queryDslTool + sourceSets.main.runtimeClasspath).asPath
        ant {
            javac(classpath: classPathStr, includes: 'com/apptricity/**', includeantruntime: false) {
                sourceSets.main.java.srcDirs.each {
                    if (it != queryDslDir) {
                        src(path: it.path)
                    }
                }
                compilerarg value: '-proc:only'
                compilerarg value: '-processor'
                compilerarg value: 'com.mysema.query.apt.QuerydslAnnotationProcessor'
                compilerarg value: '-s'
                compilerarg value: queryDslDir.path
            }
            echo(message: 'Generated QueryDSL Helpers')
        }
    }
}

compileJava.dependsOn generateSources
//
// We use the Gradle Wrapper
//
task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
