group 'apptricity'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
    }
}

//
// BUILD_NUMBER - Comes from Jenkins or you can add it manually 'gradlew -PBUILD_NUMBER=xx buildForInsert'
//
if (!project.hasProperty('BUILD_NUMBER')) {
    version = "0.1-SNAPSHOT"
} else {
    version = "1.${BUILD_NUMBER}"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'eric-kamradt-server'
}

//
// Use the maven repository for the following dependencies.
//
repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile group: "org.springframework.boot", name: "spring-boot-starter-web", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter-data-rest", version: "1.3.2.RELEASE"
    compile group: "org.springframework.boot", name: "spring-boot-starter-data-mongodb", version: "1.3.2.RELEASE"
    compile group: 'javax.persistence', name: 'com.springsource.javax.persistence', version: '2.0.0'

    compile group: 'com.mysema.querydsl', name: 'querydsl-mongodb', version: '3.7.2'
    compile group: 'com.mysema.querydsl', name: 'querydsl-core', version: '3.7.2'
    compile group: 'com.mysema.querydsl', name: 'querydsl-apt', version: '3.7.2'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

configurations {
    queryDslTool
}

task generateSources {
    def queryDslDir = new File(buildDir, 'generated-sources/java')
    sourceSets.main.java.srcDirs += queryDslDir
    inputs.files(sourceSets.main.java.srcDirs)
    outputs.dir(queryDslDir)
    doLast {
        if (!queryDslDir.exists()) {
            queryDslDir.mkdirs()
        }
        def classPathStr = (configurations.queryDslTool + sourceSets.main.runtimeClasspath).asPath
        ant {

            javac(classpath: classPathStr, includes: 'com/apptricity/**', includeantruntime: false) {
                sourceSets.main.java.srcDirs.each {
                    if (it != queryDslDir) {
                        src(path: it.path)
                    }
                }
                compilerarg value: '-proc:only'
                compilerarg value: '-processor'
                compilerarg value: "com.mysema.query.apt.jpa.JPAAnnotationProcessor"
                // compilerarg value:  'org.springframework.data.mongodb.repository.support.MongoAnnotationProcessor'
                // compilerarg value:  'com.mysema.query.apt.QuerydslAnnotationProcessor'
                compilerarg value: '-s'
                compilerarg value: queryDslDir.path
            }
            echo(message: 'Generated QueryDSL Helpers')
        }
    }
}

compileJava.dependsOn generateSources

// ===========================================================================================

//
// We use the Gradle Wrapper
//
task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
